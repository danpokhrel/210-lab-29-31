My unit testing program will run the function several times using a series of parameters that span a range of data that the function is supposed to be able to handle. Then the program will validate the output of the function and print it to the terminal.

for data:
    data[5] = {list<Organism>{Organism(2, 10), Organism(5, 3)},
               list<Organism>{Organism(1, 3), Organism(6, 7)},
               list<Organism>{Organism(7), Organism(10)}};

    cout << (data[5][0]).front().age << endl;
    cout << (data[5][1]).back().age << endl;
    cout << (data[5][2]).front().age << endl;


for simulate():
    for (int i = 0; i < ITER; i++){
        simulate(data);
        cout << (data[5][2]).front().age << endl;
    }

for splitStrBy():
    string testStr1 = "a,b,2c,aSf,va3sfg,b_as,svesa";
    string testStr2 = "1|245|21|235|23536|232";
    vector<string> result1 = splitStrBy(testStr1, ',');
    vector<string> result2 = splitStrBy(testStr2, '|');
    for (auto str : result1)
        cout << str << " ";
    for (auto str:result2)
        cout << str << " ";

for populateData():
    populateData(data);
    cout << data.size() << endl; // should be 25
    cout << (data[72][0]).front().age << endl; // should be 8
    cout << (data[71][3]).back().age << endl; // should be 10

for probability():
    for (int i = 0; i <= 100; i++){
        int avg = 0;
        for (int x = 0; x < 1000; x++){
            if (probability(i)) avg += 100;
        }
        avg /= 1000;
        cout << avg << endl;
    }